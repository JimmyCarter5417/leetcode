// (This problem is the same as Minimize Malware Spread, with the differences bolded.)

// In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

// Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

// Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

// We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

// Example 1:

// Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
// Output: 0
// Example 2:

// Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
// Output: 1
// Example 3:

// Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
// Output: 1
 

// Note:

// 1 < graph.length = graph[0].length <= 300
// 0 <= graph[i][j] == graph[j][i] <= 1
// graph[i][i] = 1
// 1 <= initial.length < graph.length
// 0 <= initial[i] < graph.length

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int res = initial.front(); // 节点
        int num = graph.size(); // 感染总数
        
        for (int node: initial)
        {
            vector<vector<int>> G(graph.size(), vector<int>(graph.size(), 0));
            // 删除node节点，构造图
            for (int i = 0; i < graph.size() - 1; i++)
            {
                for (int j = i + 1; j < graph.size(); j++)
                {
                    if (i != node && j != node)
                    {                    
                        if (graph[i][j] == 1)
                        {
                            G[i][j] = 1;
                            G[j][i] = 1;
                        }
                    }
                }
            }
            
            int cnt = 0; // 删除node节点，能够感染的总数
            vector<bool> infected(graph.size(), false);
            // 遍历initial，dfs获得可感染的总数
            for (int n: initial)
            {
                if (!infected[n] && n != node)
                {
                    cnt += dfs(G, infected, n);
                }               
            }
            
            // 取可使总感染数最小的节点，或索引最小的节点
            if (cnt < num || (cnt == num && node < res))
            {
                res = node;
                num = cnt;
            }
        }
        
        return res;
    }
    
    int dfs(const vector<vector<int>>& G, vector<bool>& infected, int node)
    {
        int cnt = 1;
        infected[node] = true;
        
        for (int i = 0; i < G[node].size(); i++)
        {
            if (G[node][i] && !infected[i])
            {
                cnt += dfs(G, infected, i);
            }
        }
        
        return cnt;
    }
};